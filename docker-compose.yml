version: '3.1'

volumes:
    prometheus_data: {}
    prometheus-slave_data: {}
    grafana_data: {}
    influxdb_data: {}

networks:
  front-tier:
  back-tier:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.16.100.0/24

services:
  prometheus:
    image: prom/prometheus:v2.5.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - back-tier
    restart: always

  prometheus-slave:
    image: prom/prometheus:v2.5.0
    container_name: prometheus-slave
    volumes:
      - ./prometheus-slave/:/etc/prometheus/
      - prometheus-slave_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 8090:9090
    networks:
      - back-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - back-tier
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "104"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always
  
  consul-server:
    image: consul:latest
    container_name: consul-server
    networks:
      - back-tier
    ports:
      - "8500:8500"
    command: "agent -server -bootstrap -ui -client 0.0.0.0"
    restart: always

  registrator:
    image: gliderlabs/registrator:latest
    container_name: registrator
    depends_on: 
      - consul-server
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    command: "consul://consul-server:8500"
    networks:
      - back-tier
    restart: always

  # Define a Telegraf service
  telegraf:
    image: telegraf:1.4.0
    container_name: telegraf
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    links:
      - influxdb
    ports:
      - "8092:8092/udp"
      - "8094:8094"
      - "8125:8125/udp"
    networks:
      - back-tier
    restart: always
    hostname: telegraf
  # Define an InfluxDB service
  influxdb:
    image: influxdb:1.3.5
    container_name: influxdb
    volumes:
      - influxdb_data:/var/lib/influxdb
    ports:
      - "8086:8086"
    networks:
      - back-tier
    restart: always
    hostname: influxdb
  # Define a Chronograf service
  chronograf:
    image: chronograf:1.3.8
    container_name: chronograf
    environment:
      INFLUXDB_URL: http://influxdb:8086
      KAPACITOR_URL: http://kapacitor:9092
    ports:
      - "8888:8888"
    links:
      - influxdb
      - kapacitor
    networks:
      - back-tier
    restart: always
  # Define a Kapacitor service
  kapacitor:
    image: kapacitor:1.3.3
    container_name: kapacitor
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
    links:
      - influxdb
    ports:
      - "9092:9092"
    networks:
      - back-tier
    restart: always
  # Define a service for using the influx CLI tool.
  # docker-compose run influxdb-cli
  influxdb-cli:
    container_name: influxdb-cli
    image: influxdb:1.3.5
    entrypoint:
      - influx
      - -host
      - influxdb
    links:
      - influxdb
    networks:
      - back-tier
  # Define a service for using the kapacitor CLI tool.
  # docker-compose run kapacitor-cli
  kapacitor-cli:
    container_name: kapacitor-cli
    image: kapacitor:1.3.3
    entrypoint: bash
    environment:
      KAPACITOR_URL: http://kapacitor:9092
    links:
    - kapacitor
    networks:
      - back-tier
